# Basic Thor type definitions for Sxn
class Thor
  def self.exit_on_failure?: () -> bool
  
  # Class-level DSL methods
  def self.desc: (String usage, String description) -> void
  def self.method_option: (Symbol name, ?Hash[Symbol, untyped] options) -> void
  def self.method_options: (Hash[Symbol, untyped] options) -> void
  def self.default_task: (Symbol task_name) -> void
  def self.map: (Hash[String, Symbol] mappings) -> void
  def self.class_option: (Symbol name, ?Hash[Symbol, untyped] options) -> void
  
  # Instance methods
  def options: () -> Hash[Symbol, untyped]
  def say: (String message, ?Symbol? color) -> void
  def say_status: (String status, String message, ?Symbol? color) -> void
  def ask: (String question, ?Hash[Symbol, untyped] options) -> String
  def yes?: (String question, ?Hash[Symbol, untyped] options) -> bool
  def no?: (String question, ?Hash[Symbol, untyped] options) -> bool
  def error: (String message) -> void
  def set_color: (String message, Symbol color) -> String
  def inside: (String dir) { () -> void } -> void
  def run: (String command, ?Hash[Symbol, untyped] options) -> void
  def invoke: (Symbol task, ?Array[untyped] args) -> void
  
  # Error handling
  class Error < ::StandardError
  end
  
  class MalformattedArgumentError < Error
  end
  
  class UnknownArgumentError < Error
  end
  
  class RequiredArgumentMissingError < Error
  end
  
  class InvocationError < Error
  end
end

# Thor::Group for command groups
class Thor::Group < Thor
end

# Thor::Actions module for file manipulation and command execution
module Thor::Actions
  def create_file: (String destination, ?String? content, ?Hash[Symbol, untyped] config) -> void
  def add_file: (String destination, ?String? source, ?Hash[Symbol, untyped] config) -> void
  def create_link: (String destination, String source, ?Hash[Symbol, untyped] config) -> void
  def directory: (String source, String destination, ?Hash[Symbol, untyped] config) -> void
  def empty_directory: (String destination, ?Hash[Symbol, untyped] config) -> void
  def inside: (String dir, ?Hash[Symbol, untyped] config) { () -> void } -> void
  def run: (String command, ?Hash[Symbol, untyped] config) -> void
  def run_ruby_script: (String command, ?Hash[Symbol, untyped] config) -> void
  def thor: (String command, ?Hash[Symbol, untyped] config) -> void
  def chmod: (String path, Integer mode, ?Hash[Symbol, untyped] config) -> void
  def gsub_file: (String path, Regexp | String flag, String | Proc replacement, ?Hash[Symbol, untyped] config) -> void
  def append_to_file: (String path, String | Proc content, ?Hash[Symbol, untyped] config) -> void
  def prepend_to_file: (String path, String | Proc content, ?Hash[Symbol, untyped] config) -> void
  def inject_into_class: (String path, String klass, String | Proc content, ?Hash[Symbol, untyped] config) -> void
  def inject_into_module: (String path, String module_name, String | Proc content, ?Hash[Symbol, untyped] config) -> void
  def inject_into_file: (String destination, String | Proc content, ?Hash[Symbol, untyped] config) -> void
  def insert_into_file: (String destination, String | Proc content, ?Hash[Symbol, untyped] config) -> void
  def comment_lines: (String path, Regexp | String flag, ?Hash[Symbol, untyped] config) -> void
  def uncomment_lines: (String path, Regexp | String flag, ?Hash[Symbol, untyped] config) -> void
  def remove_file: (String path, ?Hash[Symbol, untyped] config) -> void
  def copy_file: (String source, String destination, ?Hash[Symbol, untyped] config) -> void
  def link_file: (String source, String destination, ?Hash[Symbol, untyped] config) -> void
  def get: (String source, String destination, ?Hash[Symbol, untyped] config) -> void
  def template: (String source, String destination, ?Hash[Symbol, untyped] config) -> void
  def relative_to_original_destination_root: (String path, ?bool remove_dot) -> String
  def source_paths: () -> Array[String]
  def destination_root: () -> String
  def destination_root=: (String path) -> void
  def in_root: () { () -> void } -> void
  def apply: (String path, ?Hash[Symbol, untyped] config) -> void
  def action: (Class action_class, *untyped args) -> void
end

# Thor::Shell module for output
module Thor::Shell
  class Basic
    def say: (String message, ?Symbol? color) -> void
    def say_status: (String status, String message, ?Symbol? color) -> void
    def ask: (String question, ?Hash[Symbol, untyped] options) -> String
    def yes?: (String question) -> bool
    def no?: (String question) -> bool
    def error: (String message) -> void
    def set_color: (String message, Symbol color) -> String
  end
  
  class Color < Basic
  end
  
  class HTML < Basic
  end
end