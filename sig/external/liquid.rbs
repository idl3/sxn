# Basic Liquid template engine type definitions for Sxn

module Liquid
  class Template
    def self.parse: (String source, ?Hash[Symbol, untyped]? options) -> Template
    def self.error_mode: () -> Symbol
    def self.error_mode=: (Symbol mode) -> void
    def self.file_system: () -> untyped
    def self.file_system=: (untyped file_system) -> void
    
    def render: (?Hash[String, untyped]? assigns, ?Hash[Symbol, untyped]? options) -> String
    def render!: (?Hash[String, untyped]? assigns, ?Hash[Symbol, untyped]? options) -> String
    def errors: () -> Array[StandardError]
    def warnings: () -> Array[untyped]
    def root: () -> untyped
    def assigns: () -> Hash[String, untyped]
    def instance_assigns: () -> Hash[String, untyped]
    def registers: () -> Hash[Symbol, untyped]
  end
  
  class Error < ::StandardError
  end
  
  class SyntaxError < Error
  end
  
  class ArgumentError < Error
  end
  
  class FileSystemError < Error
  end
  
  class StandardError < Error
  end
  
  class StackLevelError < Error
  end
  
  class MemoryError < Error
  end
  
  class ZeroDivisionError < Error
  end
  
  class FloatDomainError < Error
  end
  
  class UndefinedVariable < Error
  end
  
  class UndefinedDropMethod < Error
  end
  
  class UndefinedFilter < Error
  end
  
  class MethodOverrideError < Error
  end
  
  class DisabledError < Error
  end
  
  class Context
    def initialize: (?Hash[Symbol, untyped] environments, ?Hash[Symbol, untyped] outer_scope, ?Hash[Symbol, untyped] registers, ?bool rethrow_errors) -> void
    def registers: () -> Hash[Symbol, untyped]
    def environments: () -> Array[Hash[String, untyped]]
    def scopes: () -> Array[Hash[String, untyped]]
  end
  
  module StandardFilters
    def size: (untyped input) -> Integer
    def downcase: (String input) -> String
    def upcase: (String input) -> String
    def capitalize: (String input) -> String
    def strip: (String input) -> String
    def rstrip: (String input) -> String
    def lstrip: (String input) -> String
    def strip_html: (String input) -> String
    def strip_newlines: (String input) -> String
    def newline_to_br: (String input) -> String
    def replace: (String input, String string, String replacement) -> String
    def replace_first: (String input, String string, String replacement) -> String
    def remove: (String input, String string) -> String
    def remove_first: (String input, String string) -> String
    def truncate: (String input, Integer length, ?String ellipsis) -> String
    def truncatewords: (String input, Integer words, ?String ellipsis) -> String
    def prepend: (String input, String string) -> String
    def append: (String input, String string) -> String
    def slice: (String input, Integer offset, ?Integer? length) -> String
    def split: (String input, String pattern) -> Array[String]
    def join: (Array[untyped] input, String glue) -> String
    def sort: (Array[untyped] input) -> Array[untyped]
    def sort_natural: (Array[untyped] input) -> Array[untyped]
    def uniq: (Array[untyped] input) -> Array[untyped]
    def reverse: (Array[untyped] input) -> Array[untyped]
    def map: (Array[untyped] input, String property) -> Array[untyped]
    def compact: (Array[untyped] input) -> Array[untyped]
    def first: (Array[untyped] array) -> untyped
    def last: (Array[untyped] array) -> untyped
    def abs: (Numeric input) -> Numeric
    def plus: (Numeric input, Numeric operand) -> Numeric
    def minus: (Numeric input, Numeric operand) -> Numeric
    def times: (Numeric input, Numeric operand) -> Numeric
    def divided_by: (Numeric input, Numeric operand) -> Numeric
    def modulo: (Numeric input, Numeric operand) -> Numeric
    def round: (Numeric input, ?Integer precision) -> Numeric
    def ceil: (Numeric input) -> Integer
    def floor: (Numeric input) -> Integer
    def default: (untyped input, untyped default_value) -> untyped
    def date: (untyped input, String format) -> String
    def escape: (String input) -> String
    def escape_once: (String input) -> String
    def url_encode: (String input) -> String
    def url_decode: (String input) -> String
  end
end