# TypeProf 0.21.3

module Sxn
  module Security
    class SecureCommandExecutor
      # Command execution result
      class CommandResult
        attr_reader exit_status: Integer
        attr_reader stdout: String
        attr_reader stderr: String
        attr_reader command: Array[String]
        attr_reader duration: Float

        def initialize: (Integer exit_status, String? stdout, String? stderr, Array[String] command, Float duration) -> void

        def success?: () -> bool

        def failure?: () -> bool

        def to_h: () -> Hash[Symbol, untyped]
      end

      # Whitelist of allowed commands with their expected paths
      ALLOWED_COMMANDS: Hash[String, String | Array[String] | Symbol]

      # Environment variables that are safe to preserve
      SAFE_ENV_VARS: Array[String]

      # Maximum command execution timeout (in seconds)
      MAX_TIMEOUT: Integer

      @project_root: String
      @logger: untyped
      @command_whitelist: Hash[String, String]

      def initialize: (String project_root, ?logger: untyped) -> void

      def execute: (Array[String] command, ?env: Hash[String | Symbol, String], ?timeout: Integer, ?chdir: String?) -> CommandResult

      def command_allowed?: (Array[String] command) -> bool

      def allowed_commands: () -> Array[String]

      private

      def validate_and_resolve_command: (Array[String] command) -> Array[String]

      def build_command_whitelist: () -> Hash[String, String]

      def resolve_rails_command: () -> String?

      def resolve_project_executable: (String cmd_name) -> String?

      def build_safe_environment: (Hash[String | Symbol, String] user_env) -> Hash[String, String]

      def validate_work_directory: (String chdir) -> String

      def execute_with_timeout: (Array[String] command, Hash[String, String] env, String chdir, Integer timeout) -> untyped

      def audit_log: (String event, Array[String] command, String chdir, ?Hash[untyped, untyped] details) -> void
    end
  end
end