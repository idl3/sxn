module Sxn
  module Config
    DEFAULT_CONFIG_FILENAME: String
    
    class ConfigManager
      @config_path: Pathname
      @config: Hash[String, untyped]
      @discovery: ConfigDiscovery
      @validator: ConfigValidator
      @cache: ConfigCache
      
      def initialize: (?config_path: String?) -> void
      def load: () -> Hash[String, untyped]
      def save: (Hash[String, untyped] config) -> void
      def get: (String key, ?untyped default) -> untyped
      def set: (String key, untyped value) -> void
      def delete: (String key) -> void
      def exists?: () -> bool
      def reload: () -> Hash[String, untyped]
      def validate!: () -> void
      def backup: () -> String
      def restore: (String backup_path) -> void
      
      private
      def load_config_file: () -> Hash[String, untyped]
      def save_config_file: (Hash[String, untyped] config) -> void
      def deep_get: (Hash[String, untyped] hash, String key) -> untyped
      def deep_set: (Hash[String, untyped] hash, String key, untyped value) -> void
      def deep_delete: (Hash[String, untyped] hash, String key) -> void
    end
    
    class ConfigDiscovery
      DEFAULT_SEARCH_PATHS: Array[String]
      
      def find_config: (?from: String?) -> Pathname?
      def search_paths: (String from) -> Array[Pathname]
      def config_in_directory?: (Pathname dir) -> bool
      
      private
      def expand_search_paths: (Pathname from) -> Array[Pathname]
      def check_directory: (Pathname dir) -> Pathname?
    end
    
    class ConfigValidator
      REQUIRED_KEYS: Array[String]
      VALID_LOG_LEVELS: Array[Symbol]
      
      def validate: (Hash[String, untyped] config) -> bool
      def validate!: (Hash[String, untyped] config) -> void
      def errors: () -> Array[String]
      
      private
      def validate_required_keys: (Hash[String, untyped] config) -> void
      def validate_types: (Hash[String, untyped] config) -> void
      def validate_values: (Hash[String, untyped] config) -> void
    end
    
    class ConfigCache
      @cache: Hash[String, untyped]
      @ttl: Integer
      @timestamps: Hash[String, Time]
      
      def initialize: (?ttl: Integer) -> void
      def get: (String key) -> untyped
      def set: (String key, untyped value) -> void
      def delete: (String key) -> void
      def clear: () -> void
      def expired?: (String key) -> bool
      
      private
      def cleanup_expired: () -> void
    end
  end
end