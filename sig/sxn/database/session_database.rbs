# TypeScript RBS for Sxn::Database::SessionDatabase

module Sxn
  module Database
    class SessionDatabase
      # Constants
      SCHEMA_VERSION: Integer
      DEFAULT_DB_PATH: String
      VALID_STATUSES: Array[String]

      # Instance variables
      @db_path: Pathname
      @config: Hash[Symbol, untyped]
      @prepared_statements: Hash[Symbol, untyped]
      @connection: untyped

      # Attributes
      attr_reader db_path: Pathname
      attr_reader connection: untyped
      attr_reader config: Hash[Symbol, untyped]

      # Initialize database connection and ensure schema is current
      #
      # @param db_path [String, Pathname, nil] Path to SQLite database file
      # @param config [Hash] Database configuration options
      def initialize: (?String? db_path, ?Hash[Symbol, untyped] config) -> void

      # Create a new session with validation and conflict detection
      def create_session: (Hash[Symbol, untyped] session_data) -> String

      # List sessions with filtering, sorting, and pagination
      def list_sessions: (?filters: Hash[Symbol, untyped], ?sort: Hash[Symbol, untyped], ?limit: Integer, ?offset: Integer) -> Array[Hash[Symbol, untyped]]

      # Update session data with optimistic locking
      def update_session: (String session_id, ?Hash[Symbol, untyped] updates, ?expected_version: String?) -> bool

      # Delete session with cascade options
      def delete_session: (String session_id, ?cascade: bool) -> bool

      # Search sessions with full-text search and filters
      def search_sessions: (String query, ?filters: Hash[Symbol, untyped], ?limit: Integer) -> Array[Hash[Symbol, untyped]]

      # Get single session by ID
      def get_session: (String session_id) -> Hash[Symbol, untyped]

      # Get session by name
      def get_session_by_name: (String name) -> Hash[Symbol, untyped]?

      # Alias for get_session for compatibility
      alias get_session_by_id get_session

      # Get session statistics
      def statistics: () -> Hash[Symbol, untyped]

      # Execute database maintenance tasks
      def maintenance: (?Array[Symbol] tasks) -> Hash[Symbol, untyped]

      # Close database connection and cleanup prepared statements
      def close: () -> void

      # Update session status
      def update_session_status: (String name, String status) -> bool

      # Public method to create database tables (expected by tests)
      def create_tables: () -> void

      private

      # Default database configuration
      def default_config: () -> Hash[Symbol, untyped]

      # Resolve database path, creating parent directories if needed
      def resolve_db_path: (String? path) -> Pathname

      # Ensure parent directory exists for database file
      def ensure_directory_exists: () -> void

      # Initialize SQLite connection with optimized settings
      def initialize_connection: () -> void

      # Configure SQLite PRAGMA settings for performance and safety
      def configure_sqlite_pragmas: () -> void

      # Setup database schema and run migrations
      def setup_database: () -> void

      # Get current schema version from database
      def get_schema_version: () -> Integer

      # Set schema version in database
      def set_schema_version: (Integer version) -> void

      # Create initial database schema with optimized indexes
      def create_initial_schema: () -> void

      # Run database migrations from old version to current
      def run_migrations: (Integer from_version) -> void

      # Generate secure, unique session ID
      def generate_session_id: () -> String

      # Validate session data before creation
      def validate_session_data!: (Hash[Symbol, untyped] data) -> void

      # Validate session update data
      def validate_session_updates!: (Hash[Symbol, untyped] updates) -> void

      # Serialize tags array to JSON string
      def serialize_tags: (Array[String]? tags) -> String?

      # Serialize metadata hash to JSON string
      def serialize_metadata: (Hash[untyped, untyped]? metadata) -> String?

      # Deserialize session row from database
      def deserialize_session_row: (Hash[String, untyped] row) -> Hash[Symbol, untyped]

      # Get session directory path
      def session_directory_path: (String session_name) -> String

      # Build WHERE conditions for filtering
      def build_where_conditions: (Hash[Symbol, untyped] filters, Array[untyped] params) -> Array[String]

      # Execute query with parameters and return results
      def execute_query: (String sql, ?Array[untyped] params) -> Array[Hash[String, untyped]]

      # Transaction wrapper with rollback support
      def with_transaction: [T] () { () -> T } -> T

      # Prepare and cache SQL statements for performance
      def prepare_statement: (Symbol name, String sql) -> untyped

      # Count total sessions
      def count_sessions: () -> Integer

      # Count sessions by status
      def count_sessions_by_status: () -> Hash[String, Integer]

      # Get recent session activity (last 7 days)
      def recent_session_activity: () -> Integer

      # Get database file size in MB
      def database_size_mb: () -> Float

      # Delete session worktrees (for cascade deletion)
      def delete_session_worktrees: (String session_id) -> void

      # Delete session files (for cascade deletion)
      def delete_session_files: (String session_id) -> void
    end
  end
end