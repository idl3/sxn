module Sxn
  module Core
    class SessionManager
      @config: Hash[String, untyped]
      @database: Database::SessionDatabase
      @worktree_manager: WorktreeManager
      @rules_manager: RulesManager
      
      def initialize: (?config: Hash[String, untyped]?) -> void
      def create: (String session_name, ?Hash[String, untyped] options) -> Hash[String, untyped]
      def list: (?status: Symbol?) -> Array[Hash[String, untyped]]
      def get: (String session_name) -> Hash[String, untyped]?
      def update: (String session_name, Hash[String, untyped] attributes) -> void
      def delete: (String session_name) -> void
      def exists?: (String session_name) -> bool
      def active_sessions: () -> Array[Hash[String, untyped]]
      def activate: (String session_name) -> void
      def deactivate: (String session_name) -> void
      
      private
      def validate_session_name: (String name) -> void
      def create_session_directory: (String session_name, String project_path) -> String
      def setup_worktree: (String session_name, String project_path) -> void
      def apply_rules: (String session_name, Hash[String, untyped] options) -> void
    end
    
    class WorktreeManager
      @config: Hash[String, untyped]
      
      def initialize: (?config: Hash[String, untyped]?) -> void
      def create: (String name, String source_path, ?String? branch) -> String
      def list: (String project_path) -> Array[Hash[String, untyped]]
      def delete: (String name, String project_path) -> void
      def exists?: (String name, String project_path) -> bool
      def prune: (String project_path) -> void
      def get_path: (String name, String project_path) -> String?
      
      private
      def validate_git_repository: (String path) -> void
      def execute_git_command: (String path, String command) -> String
      def parse_worktree_list: (String output) -> Array[Hash[String, untyped]]
    end
    
    class ProjectManager
      @config: Hash[String, untyped]
      @database: Database::SessionDatabase
      
      def initialize: (?config: Hash[String, untyped]?) -> void
      def add: (String name, String path, ?Hash[String, untyped] options) -> void
      def remove: (String name) -> void
      def list: () -> Array[Hash[String, untyped]]
      def get: (String name) -> Hash[String, untyped]?
      def update: (String name, Hash[String, untyped] attributes) -> void
      def exists?: (String name) -> bool
      def detect_type: (String path) -> Symbol
      
      private
      def validate_project_path: (String path) -> void
      def detect_project_type: (String path) -> Symbol
      def load_project_config: (String path) -> Hash[String, untyped]
    end
    
    class RulesManager
      @config: Hash[String, untyped]
      @rules: Array[Rules::BaseRule]
      
      def initialize: (?config: Hash[String, untyped]?) -> void
      def add_rule: (Rules::BaseRule rule) -> void
      def remove_rule: (String rule_name) -> void
      def apply: (String session_name, Hash[String, untyped] context) -> void
      def list: () -> Array[Hash[String, untyped]]
      def get: (String rule_name) -> Rules::BaseRule?
      def enabled_rules: () -> Array[Rules::BaseRule]
      def disabled_rules: () -> Array[Rules::BaseRule]
      
      private
      def load_rules: () -> Array[Rules::BaseRule]
      def execute_rule: (Rules::BaseRule rule, Hash[String, untyped] context) -> void
      def handle_rule_error: (StandardError error, Rules::BaseRule rule) -> void
    end
    
    class ConfigManager
      # Alias to Config::ConfigManager
      include Config
    end
  end
end