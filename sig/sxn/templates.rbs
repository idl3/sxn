module Sxn
  module Templates
    # Template engine for processing Liquid templates
    class TemplateEngine
      @templates_dir: Pathname
      @cache: Hash[String, Liquid::Template]
      
      def initialize: (?templates_dir: String?) -> void
      def render: (String template_name, ?Hash[String, untyped] variables) -> String
      def template_exists?: (String template_name) -> bool
      def list_templates: () -> Array[String]
      def clear_cache: () -> void
      
      private
      def find_template: (String name) -> Pathname?
      def load_template: (String path) -> Liquid::Template
      def search_paths: (String name) -> Array[Pathname]
    end
    
    # Template processor that handles template rendering with variables
    class TemplateProcessor
      @engine: TemplateEngine
      @security: TemplateSecurity
      @variables: TemplateVariables
      
      def initialize: (?engine: TemplateEngine?, ?security: TemplateSecurity?, ?variables: TemplateVariables?) -> void
      def process: (String template_name, ?Hash[String, untyped] additional_vars) -> String
      def process_directory: (String template_dir, String output_dir, ?Hash[String, untyped] variables) -> void
      def available_templates: () -> Array[String]
      
      private
      def safe_variables: (Hash[String, untyped] vars) -> Hash[String, untyped]
      def merge_variables: (Hash[String, untyped] base, Hash[String, untyped] additional) -> Hash[String, untyped]
    end
    
    # Template security for validating template operations
    class TemplateSecurity
      MAX_TEMPLATE_SIZE: Integer
      MAX_RENDER_TIME: Integer
      SAFE_LIQUID_TAGS: Array[String]
      
      def validate_template: (String content) -> void
      def validate_path: (String path) -> void
      def validate_variables: (Hash[String, untyped] variables) -> void
      def sanitize_output: (String output) -> String
      
      private
      def check_template_size: (String content) -> void
      def check_dangerous_tags: (String content) -> void
      def check_path_traversal: (String path) -> void
    end
    
    # Template variables collector
    class TemplateVariables
      @session: untyped
      @project: untyped
      @config: untyped
      @cached_variables: Hash[String, untyped]
      
      def initialize: (?untyped session, ?untyped project, ?untyped config) -> void
      def collect: () -> Hash[String, untyped]
      def clear_cache: () -> void
      
      private
      def collect_session_variables: () -> Hash[String, untyped]
      def _collect_session_variables: () -> Hash[String, untyped]
      def collect_git_variables: () -> Hash[String, untyped]
      def _collect_git_variables: () -> Hash[String, untyped]
      def find_git_directory: () -> Pathname?
      def git_repository?: (untyped path) -> bool
      def collect_git_branch_info: (Pathname git_dir) -> Hash[String, untyped]
      def collect_git_commit_info: (Pathname git_dir) -> Hash[String, untyped]
      def collect_git_author_info: (Pathname git_dir) -> Hash[String, untyped]
      def execute_git_command: (Pathname? directory, *String args) ?{ (String) -> void } -> String?
      def collect_project_variables: () -> Hash[String, untyped]
      def _collect_project_variables: () -> Hash[String, untyped]
      def collect_environment_variables: () -> Hash[String, untyped]
      def _collect_environment_variables: () -> Hash[String, untyped]
      def collect_ruby_version: () -> Hash[String, untyped]
      def collect_rails_version: () -> Hash[String, untyped]
      def node_available?: () -> bool
      def collect_node_version: () -> Hash[String, untyped]
      def collect_user_variables: () -> Hash[String, untyped]
      def _collect_user_variables: () -> Hash[String, untyped]
      def get_git_config: (String key) -> String?
    end
    
    # Module errors
    class Error < ::StandardError
    end
    
    class TemplateNotFoundError < Error
    end
    
    class TemplateRenderError < Error
    end
    
    class TemplateSecurityError < Error
    end
    
    class TemplateVariableError < Error
    end
  end
end