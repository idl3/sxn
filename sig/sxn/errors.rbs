module Sxn
  # Base error class for all Sxn errors
  class Error < ::StandardError
    def initialize: (?String? message, ?cause: Exception?) -> void
    def detailed_message: () -> String
    def user_message: () -> String
    
    private
    def format_backtrace: () -> String?
  end
  
  # Configuration related errors
  class ConfigError < Error
  end
  
  class ConfigNotFoundError < ConfigError
  end
  
  class ConfigValidationError < ConfigError
    attr_reader errors: Array[String]
    
    def initialize: (Array[String] errors, ?String? message) -> void
  end
  
  # Session related errors
  class SessionError < Error
  end
  
  class SessionNotFoundError < SessionError
  end
  
  class SessionAlreadyExistsError < SessionError
  end
  
  class SessionActiveError < SessionError
  end
  
  # Worktree related errors
  class WorktreeError < Error
  end
  
  class WorktreeNotFoundError < WorktreeError
  end
  
  class WorktreeAlreadyExistsError < WorktreeError
  end
  
  # Project related errors
  class ProjectError < Error
  end
  
  class ProjectNotFoundError < ProjectError
  end
  
  class ProjectAlreadyExistsError < ProjectError
  end
  
  # Git related errors
  class GitError < Error
  end
  
  class NotAGitRepositoryError < GitError
  end
  
  class GitCommandError < GitError
    attr_reader command: String
    attr_reader exit_status: Integer
    
    def initialize: (String command, Integer exit_status, ?String? message) -> void
  end
  
  # File system errors
  class FileSystemError < Error
  end
  
  class PathNotFoundError < FileSystemError
  end
  
  class PermissionDeniedError < FileSystemError
  end
  
  # Validation errors
  class ValidationError < Error
    attr_reader field: String?
    attr_reader value: untyped
    
    def initialize: (?String? field, ?untyped value, ?String? message) -> void
  end
end