# frozen_string_literal: true

module Sxn
  module Core
    # Manages project rules and their application
    class RulesManager
      @config_manager: ConfigManager
      @project_manager: ProjectManager
      @rules_engine: Sxn::Rules::RulesEngine

      def initialize: (?ConfigManager? config_manager, ?ProjectManager? project_manager) -> void

      def add_rule: (String project_name, String rule_type, Hash[String, untyped] rule_config) -> Hash[Symbol, untyped]

      def remove_rule: (String project_name, String rule_type, ?Integer? rule_index) -> untyped

      def list_rules: (?String? project_name) -> Array[Hash[Symbol, untyped]]

      def apply_rules: (String project_name, ?String? session_name) -> void

      def validate_rules: (String project_name) -> Array[Hash[Symbol, untyped]]

      def generate_rule_template: (String rule_type, ?String? project_type) -> Array[Hash[String, untyped]]

      def get_available_rule_types: () -> Array[Hash[Symbol, untyped]]

      private

      def validate_rule_type!: (String rule_type) -> void

      def validate_rule_config!: (String rule_type, Hash[String, untyped] rule_config) -> void

      def validate_copy_files_config!: (Hash[String, untyped] config) -> void

      def validate_setup_commands_config!: (Hash[String, untyped] config) -> void

      def validate_template_config!: (Hash[String, untyped] config) -> void

      def list_project_rules: (String project_name) -> Array[Hash[Symbol, untyped]]

      def list_all_rules: () -> Array[Hash[Symbol, untyped]]

      def format_rules_for_display: (String project_name, Hash[String, untyped] rules) -> Array[Hash[Symbol, untyped]]

      def save_project_config: (String project_name, Hash[String, untyped] project_config) -> void

      def generate_copy_files_template: (String? project_type) -> Array[Hash[String, untyped]]

      def generate_setup_commands_template: (String? project_type) -> Array[Hash[String, untyped]]

      def generate_template_rule_template: (String? project_type) -> Array[Hash[String, untyped]]
    end
  end
end