# frozen_string_literal: true

module Sxn
  module Core
    # Manages git worktree operations
    class WorktreeManager
      @config_manager: ConfigManager
      @session_manager: SessionManager
      @project_manager: ProjectManager

      def initialize: (?ConfigManager? config_manager, ?SessionManager? session_manager) -> void

      def add_worktree: (String project_name, ?String? branch, ?session_name: String?) -> Hash[Symbol, untyped]

      def remove_worktree: (String project_name, ?session_name: String?) -> bool

      def list_worktrees: (?session_name: String?) -> Array[Hash[Symbol, untyped]]

      def get_worktree: (String project_name, ?session_name: String?) -> Hash[Symbol, untyped]?

      # Check if a worktree exists for a project
      def worktree_exists?: (String project_name, ?session_name: String?) -> bool

      # Get the path to a worktree for a project
      def worktree_path: (String project_name, ?session_name: String?) -> String?

      # Validate worktree name (expected by tests)
      def validate_worktree_name: (String name) -> bool

      # Execute git command (mock point for tests)
      def execute_git_command: (*untyped) -> bool

      def validate_worktree: (String project_name, ?session_name: String?) -> Hash[Symbol, untyped]

      private

      def create_git_worktree: (String project_path, String worktree_path, String branch) -> void

      def remove_git_worktree: (String project_path, String worktree_path) -> void

      def remove_git_worktree_by_path: (String worktree_path) -> void

      def get_worktree_status: (String path) -> String

      def valid_git_worktree?: (String path) -> bool

      def check_git_status: (String path) -> Array[String]
    end
  end
end