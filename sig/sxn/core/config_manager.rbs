# frozen_string_literal: true

module Sxn
  module Core
    # Manages configuration initialization and access
    class ConfigManager
      @base_path: String
      @config_path: String
      @sessions_folder: String?

      attr_reader config_path: String
      attr_reader sessions_folder: String?

      def initialize: (?String base_path) -> void

      def initialized?: () -> bool

      def initialize_project: (String sessions_folder, ?force: bool) -> String

      def get_config: () -> Hash[untyped, untyped]

      def update_current_session: (String? session_name) -> void

      def current_session: () -> String?

      def sessions_folder_path: () -> String?

      def add_project: (String name, String path, ?type: String?, ?default_branch: String?) -> void

      def remove_project: (String name) -> void

      def list_projects: () -> Array[Hash[Symbol, untyped]]

      def get_project: (String name) -> Hash[Symbol, untyped]?

      def update_project: (String name, Hash[Symbol, untyped] updates) -> bool

      def update_project_config: (String name, Hash[Symbol, untyped] updates) -> bool

      def detect_projects: () -> Array[Hash[Symbol, String]]

      # Updates .gitignore to include SXN-related entries if not already present
      def update_gitignore: () -> bool

      # Public method to save configuration (expected by tests)
      def save_config: () -> bool

      private

      def sessions_folder_relative_path: () -> String

      def has_gitignore_entry?: (Array[String] lines, String entry) -> bool

      def load_config: () -> void

      def load_config_file: () -> Hash[untyped, untyped]

      def save_config_file: (Hash[untyped, untyped] config) -> void

      def create_directories: () -> void

      def create_config_file: () -> void

      def setup_database: () -> Sxn::Database::SessionDatabase
    end
  end
end