# frozen_string_literal: true

module Sxn
  module Commands
    # Manage project setup rules
    class Rules < Thor
      include Thor::Actions

      @ui: Sxn::UI::Output
      @prompt: Sxn::UI::Prompt
      @table: Sxn::UI::Table
      @config_manager: Sxn::Core::ConfigManager
      @project_manager: Sxn::Core::ProjectManager
      @rules_manager: Sxn::Core::RulesManager

      # Initialize the command with Thor arguments
      def initialize: (?Array[String] args, ?Hash[Symbol, untyped] local_options, ?Hash[Symbol, untyped] config) -> void

      # Add a setup rule for project
      # @param project_name Project name
      # @param rule_type Type of rule
      # @param rule_config Rule configuration
      def add: (?String? project_name, ?String? rule_type, ?String? rule_config) -> void

      # Remove a rule
      # @param project_name Project name
      # @param rule_type Rule type
      # @param rule_index Rule index
      def remove: (?String? project_name, ?String? rule_type, ?String? rule_index) -> void

      # List all rules or rules for specific project
      # @param project_name Project name (optional)
      def list: (?String? project_name) -> void

      # Apply rules to current session
      # @param project_name Project name (optional)
      def apply: (?String? project_name) -> void

      # Validate rules for a project
      # @param project_name Project name
      def validate: (?String? project_name) -> void

      # Generate rule template
      # @param rule_type Type of rule
      # @param project_type Type of project (optional)
      def template: (?String? rule_type, ?String? project_type) -> void

      # List available rule types
      def types: () -> void

      private

      # Ensure the project is initialized, exit if not
      def ensure_initialized!: () -> void

      # Select a project interactively
      # @param message Prompt message
      # @return Project name or nil
      def select_project: (String message) -> String?

      # Prompt for rule configuration based on rule type
      # @param rule_type Type of rule
      # @return Configuration hash
      def prompt_rule_config: (String rule_type) -> Hash[String, untyped]

      # Prompt for copy files rule configuration
      # @return Configuration hash
      def prompt_copy_files_config: () -> Hash[String, untyped]

      # Prompt for setup commands rule configuration  
      # @return Configuration hash
      def prompt_setup_commands_config: () -> Hash[String, untyped]

      # Prompt for template rule configuration
      # @return Configuration hash
      def prompt_template_config: () -> Hash[String, untyped]

      # Display rule information
      # @param rule Rule configuration
      def display_rule_info: (Hash[Symbol, untyped]? rule) -> void

      # List rules with validation
      # @param rules Array of rules
      # @param project_name Project name (optional)
      def list_with_validation: (Array[Hash[Symbol, untyped]] rules, String? project_name) -> void

      # Show rules preview for dry run
      # @param project_name Project name
      def show_rules_preview: (String project_name) -> void

      # Suggest adding a rule
      def suggest_add_rule: () -> void
    end
  end
end