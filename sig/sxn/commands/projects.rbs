# frozen_string_literal: true

module Sxn
  module Commands
    # Manage project configurations
    class Projects < Thor
      include Thor::Actions

      @ui: Sxn::UI::Output
      @prompt: Sxn::UI::Prompt
      @table: Sxn::UI::Table
      @config_manager: Sxn::Core::ConfigManager
      @project_manager: Sxn::Core::ProjectManager

      # Initialize the command with Thor arguments
      def initialize: (?Array[String] args, ?Hash[Symbol, untyped] local_options, ?Hash[Symbol, untyped] config) -> void

      # Add a project
      # @param name Project name
      # @param path Project path
      def add: (?String? name, ?String? path) -> void

      # Remove a project
      # @param name Project name
      def remove: (?String? name) -> void

      # List all projects
      def list: () -> void

      # Scan for projects and optionally register them
      # @param base_path Base path to scan from
      def scan: (?String? base_path) -> void

      # Validate a project configuration
      # @param name Project name
      def validate: (?String? name) -> void

      # Show detailed project information
      # @param name Project name
      def info: (?String? name) -> void

      private

      # Ensure the project is initialized, exit if not
      def ensure_initialized!: () -> void

      # Display project information
      # @param project Project configuration hash
      # @param detailed Whether to show detailed information
      def display_project_info: (Hash[Symbol, untyped] project, ?detailed: bool) -> void

      # Display available commands for a project
      # @param project_name Project name
      def display_project_commands: (String project_name) -> void

      # Display detected projects
      # @param projects Array of detected projects
      def display_detected_projects: (Array[Hash[Symbol, untyped]] projects) -> void

      # Register projects from detection
      # @param projects Array of projects to register
      def register_projects: (Array[Hash[Symbol, untyped]] projects) -> void

      # List projects with validation
      # @param projects Array of projects
      def list_with_validation: (Array[Hash[Symbol, untyped]] projects) -> void

      # Suggest adding a project
      def suggest_add_project: () -> void
    end
  end
end