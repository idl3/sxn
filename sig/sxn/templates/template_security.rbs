# TypeProf 0.21.3

module Sxn
  module Templates
    class TemplateSecurity
      # Maximum allowed template complexity (nested structures)
      MAX_TEMPLATE_DEPTH: Integer

      # Maximum number of variables allowed in a template
      MAX_VARIABLE_COUNT: Integer

      # Dangerous patterns that should not appear in templates
      DANGEROUS_PATTERNS: Array[Regexp]

      # Whitelisted variable namespaces
      ALLOWED_VARIABLE_NAMESPACES: Array[String]

      # Whitelisted filters (subset of Liquid's standard filters)
      SAFE_FILTERS: Array[String]

      @validation_cache: Hash[String, untyped]

      def initialize: () -> void

      def validate_template: (String template_content, ?Hash[untyped, untyped] variables) -> bool

      def sanitize_variables: (Hash[untyped, untyped] variables) -> Hash[String, untyped]

      def safe_filter?: (String filter_name) -> bool

      def clear_cache!: () -> void

      def validate_template_content: (String template_content) -> bool

      def validate_template_path: (String | Pathname template_path) -> bool

      private

      def validate_template_variables: (Hash[untyped, untyped] variables) -> bool

      def validate_template_complexity: (String template_content) -> bool

      def validate_variable_key: (untyped key) -> bool

      def validate_variable_value: (untyped value, ?depth: Integer) -> bool

      def validate_string_value: (String str) -> bool

      def sanitize_variable_key: (untyped key) -> String

      def valid_variable_namespace?: (String key) -> bool

      def sanitize_variable_value: (untyped value, ?depth: Integer) -> untyped

      def sanitize_string_value: (String str) -> String

      def count_total_variables: (Hash[untyped, untyped] variables, ?Integer count) -> Integer

      def generate_cache_key: (String template_content, Hash[untyped, untyped] variables) -> String
    end
  end
end